{"ast":null,"code":"var _jsxFileName = \"/Users/vietqnguyen/Desktop/React/03-food-order-project/src/components/Cart/Checkout.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useState, useContext, useEffect } from 'react';\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\nimport styles from './Checkout.module.css';\nimport CartContext from '../../storage/cart-context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst isEmpty = value => value.trim() === '';\n\nconst isSixChars = value => value.trim().length === 6;\n\nconst Checkout = props => {\n  _s();\n\n  //-----------------------------STRIPE-----------------------------//\n  const stripe = useStripe();\n  const elements = useElements();\n  const [paymentRequest, setPaymentRequest] = useState(null); // useEffect(() => {\n  //     if (stripe) {\n  //         const pr = stripe.paymentRequest({\n  //             country: 'CA',\n  //             currency: 'cad',\n  //             total: {\n  //               label: 'Demo total',\n  //               amount: Math.round(cartContext.totalAmount),\n  //             },\n  //             requestPayerName: true,\n  //             requestPayerEmail: true,\n  //             //card: cardElement,\n  //           });\n  //     }\n  // },[stripe])\n  //-----------------------------STRIPE-----------------------------//\n\n  const cartContext = useContext(CartContext);\n  const [formInputsValidity, setFormInputsValidity] = useState({\n    name: true,\n    street: true,\n    city: true,\n    postalCode: true\n  });\n  const nameInputRef = useRef();\n  const streetInputRef = useRef();\n  const postalInputRef = useRef();\n  const cityInputRef = useRef();\n\n  const confirmHandler = async event => {\n    event.preventDefault();\n    const enteredName = nameInputRef.current.value;\n    const enteredStreet = streetInputRef.current.value;\n    const enteredPostal = postalInputRef.current.value;\n    const enteredCity = cityInputRef.current.value;\n    const enterNameIsValid = !isEmpty(enteredName);\n    const enterStreetIsValid = !isEmpty(enteredStreet);\n    const enterCityIsValid = !isEmpty(enteredCity);\n    const enterPostalIsValid = isSixChars(enteredPostal);\n    setFormInputsValidity({\n      name: enterNameIsValid,\n      street: enterStreetIsValid,\n      city: enterCityIsValid,\n      postalCode: enterPostalIsValid\n    });\n    const formIsValid = enterNameIsValid && enterStreetIsValid && enterCityIsValid && enterPostalIsValid;\n\n    if (!formIsValid) {\n      return;\n    } //-----------------------------STRIPE-----------------------------//\n\n\n    if (!stripe || !elements) {\n      // Stripe.js has not loaded yet. Make sure to disable\n      // form submission until Stripe.js has loaded.\n      return;\n    } // Get a reference to a mounted CardElement. Elements knows how\n    // to find your CardElement because there can only ever be one of\n    // each type of element.\n\n\n    const cardElement = elements.getElement(CardElement); // Use your card Element with other Stripe.js APIs\n\n    const {\n      error,\n      paymentMethod\n    } = await stripe.createPaymentMethod({\n      type: 'card',\n      card: cardElement\n    });\n\n    if (error) {\n      console.log('[error]', error);\n    } else {\n      console.log('[PaymentMethod]', paymentMethod);\n    } //-----------------------------STRIPE-----------------------------//\n\n\n    props.onSubmit({\n      name: enteredName,\n      street: enteredStreet,\n      city: enteredCity,\n      postalCode: enteredPostal\n    });\n  };\n\n  const nameControlStyle = `${styles.control} ${formInputsValidity.name ? '' : styles.invalid}`;\n  const streetControlStyle = `${styles.control} ${formInputsValidity.street ? '' : styles.invalid}`;\n  const postalControlStyle = `${styles.control} ${formInputsValidity.postalCode ? '' : styles.invalid}`;\n  const cityControlStyle = `${styles.control} ${formInputsValidity.city ? '' : styles.invalid}`;\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: styles.form,\n    onSubmit: confirmHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameControlStyle,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        ref: nameInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 13\n      }, this), !formInputsValidity.name && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please enter a valid name!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 42\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: streetControlStyle,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"street\",\n        children: \"Street\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"street\",\n        ref: streetInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 13\n      }, this), !formInputsValidity.street && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please enter a valid street!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 44\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: postalControlStyle,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"postal\",\n        children: \"Postal Code\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"postal\",\n        ref: postalInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 13\n      }, this), !formInputsValidity.postalCode && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please enter a valid Postal Code!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 48\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: cityControlStyle,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"city\",\n        children: \"City\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"city\",\n        ref: cityInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 13\n      }, this), !formInputsValidity.city && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please enter a valid city!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 42\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.control,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"payment\",\n        children: \"Payment Method\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          border: '1px solid #ccc',\n          padding: '3px',\n          borderRadius: '4px'\n        },\n        children: /*#__PURE__*/_jsxDEV(CardElement, {\n          id: \"payment\",\n          options: {\n            style: {\n              base: {\n                fontSize: '20px',\n                color: '#424770',\n                '::placeholder': {\n                  color: '#aab7c4'\n                }\n              },\n              invalid: {\n                color: '#9e2146'\n              }\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Powerby Stripe.com\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.actions,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: props.onCancel,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: !stripe,\n        className: styles.submit,\n        children: [\"Pay CAD \", cartContext.totalAmount > 0 ? cartContext.totalAmount.toFixed(2) : 'Payment']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Checkout, \"E2U+QBwufsTVNeV3ugZ0YqT833M=\", false, function () {\n  return [useStripe, useElements];\n});\n\n_c = Checkout;\nexport default Checkout;\n\nvar _c;\n\n$RefreshReg$(_c, \"Checkout\");","map":{"version":3,"sources":["/Users/vietqnguyen/Desktop/React/03-food-order-project/src/components/Cart/Checkout.js"],"names":["useRef","useState","useContext","useEffect","CardElement","useStripe","useElements","styles","CartContext","isEmpty","value","trim","isSixChars","length","Checkout","props","stripe","elements","paymentRequest","setPaymentRequest","cartContext","formInputsValidity","setFormInputsValidity","name","street","city","postalCode","nameInputRef","streetInputRef","postalInputRef","cityInputRef","confirmHandler","event","preventDefault","enteredName","current","enteredStreet","enteredPostal","enteredCity","enterNameIsValid","enterStreetIsValid","enterCityIsValid","enterPostalIsValid","formIsValid","cardElement","getElement","error","paymentMethod","createPaymentMethod","type","card","console","log","onSubmit","nameControlStyle","control","invalid","streetControlStyle","postalControlStyle","cityControlStyle","form","border","padding","borderRadius","style","base","fontSize","color","actions","onCancel","submit","totalAmount","toFixed"],"mappings":"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","sourcesContent":["import { useRef, useState, useContext, useEffect } from 'react';\nimport {CardElement, useStripe, useElements} from '@stripe/react-stripe-js';\nimport styles from './Checkout.module.css';\nimport CartContext from '../../storage/cart-context';\n\nconst isEmpty = (value) => value.trim() === '';\nconst isSixChars = (value) => value.trim().length === 6;\n\nconst Checkout = (props) => {\n    //-----------------------------STRIPE-----------------------------//\n    const stripe = useStripe();\n    const elements = useElements();\n    const [paymentRequest, setPaymentRequest] = useState(null);\n    // useEffect(() => {\n    //     if (stripe) {\n    //         const pr = stripe.paymentRequest({\n    //             country: 'CA',\n    //             currency: 'cad',\n    //             total: {\n    //               label: 'Demo total',\n    //               amount: Math.round(cartContext.totalAmount),\n    //             },\n    //             requestPayerName: true,\n    //             requestPayerEmail: true,\n    //             //card: cardElement,\n    //           });\n    //     }\n    // },[stripe])\n    //-----------------------------STRIPE-----------------------------//\n    const cartContext = useContext(CartContext);\n    const [formInputsValidity, setFormInputsValidity] = useState({\n        name: true,\n        street: true,\n        city: true,\n        postalCode: true\n    });\n    const nameInputRef = useRef();\n    const streetInputRef = useRef();\n    const postalInputRef = useRef();\n    const cityInputRef = useRef();\n\n    const confirmHandler = async (event) => {\n        event.preventDefault();\n        \n        const enteredName = nameInputRef.current.value;\n        const enteredStreet = streetInputRef.current.value;\n        const enteredPostal = postalInputRef.current.value;\n        const enteredCity = cityInputRef.current.value;\n\n        const enterNameIsValid = !isEmpty(enteredName);\n        const enterStreetIsValid = !isEmpty(enteredStreet);\n        const enterCityIsValid = !isEmpty(enteredCity);\n        const enterPostalIsValid = isSixChars(enteredPostal);\n\n        setFormInputsValidity({\n            name: enterNameIsValid,\n            street: enterStreetIsValid,\n            city: enterCityIsValid,\n            postalCode: enterPostalIsValid\n        })\n\n        const formIsValid = enterNameIsValid && enterStreetIsValid && enterCityIsValid && enterPostalIsValid;\n\n        if (!formIsValid) {\n            return;\n        }\n        //-----------------------------STRIPE-----------------------------//\n        if (!stripe || !elements) {\n            // Stripe.js has not loaded yet. Make sure to disable\n            // form submission until Stripe.js has loaded.\n            return;\n          }\n      \n          // Get a reference to a mounted CardElement. Elements knows how\n          // to find your CardElement because there can only ever be one of\n          // each type of element.\n          const cardElement = elements.getElement(CardElement);\n      \n          // Use your card Element with other Stripe.js APIs\n          const {error, paymentMethod} = await stripe.createPaymentMethod({\n            type: 'card',\n            card: cardElement,\n          });\n            \n      \n          if (error) {\n            console.log('[error]', error);\n          } else {\n            console.log('[PaymentMethod]', paymentMethod);\n          }\n\n        //-----------------------------STRIPE-----------------------------//\n        props.onSubmit({\n            name: enteredName,\n            street: enteredStreet,\n            city: enteredCity,\n            postalCode: enteredPostal\n        });\n        \n    };\n\n    const nameControlStyle = `${styles.control} ${formInputsValidity.name ? '' : styles.invalid}`;\n    const streetControlStyle = `${styles.control} ${formInputsValidity.street ? '' : styles.invalid}`;\n    const postalControlStyle = `${styles.control} ${formInputsValidity.postalCode ? '' : styles.invalid}`;\n    const cityControlStyle = `${styles.control} ${formInputsValidity.city ? '' : styles.invalid}`;\n\n\n    return (\n    <form className={styles.form} onSubmit={confirmHandler}>\n        <div className={nameControlStyle}>\n            <label htmlFor='name'>Your Name</label>\n            <input type='text' id='name' ref={nameInputRef}/>\n            {!formInputsValidity.name && <p>Please enter a valid name!</p>}\n        </div>\n        <div className={streetControlStyle}>\n            <label htmlFor='street'>Street</label>\n            <input type='text' id='street' ref={streetInputRef}/>\n            {!formInputsValidity.street && <p>Please enter a valid street!</p>}\n        </div>\n        <div className={postalControlStyle}>\n            <label htmlFor='postal'>Postal Code</label>\n            <input type='text' id='postal' ref={postalInputRef}/>\n            {!formInputsValidity.postalCode && <p>Please enter a valid Postal Code!</p>}\n        </div>\n        <div className={cityControlStyle}>\n            <label htmlFor='city'>City</label>\n            <input type='text' id='city' ref={cityInputRef}/>\n            {!formInputsValidity.city && <p>Please enter a valid city!</p>}\n        </div>\n        <div className={styles.control}>\n            <label htmlFor='payment'>Payment Method</label>\n            <div style={{border:'1px solid #ccc', padding:'3px', borderRadius:'4px'}}>\n                <CardElement\n                    id='payment'\n                    options={{\n                        style: {\n                        base: {\n                            fontSize: '20px',\n                            color: '#424770',\n                            '::placeholder': {\n                            color: '#aab7c4',\n                            },\n                        },\n                        invalid: {\n                            color: '#9e2146',\n                        },\n                        },\n                    }}\n                />\n            </div>\n        </div>\n        <p>Powerby Stripe.com</p>\n        <div className={styles.actions}>\n            <button type=\"button\" onClick={props.onCancel}>Cancel</button>\n            <button type=\"submit\" disabled={!stripe} className={styles.submit}>Pay CAD {cartContext.totalAmount > 0 ? cartContext.totalAmount.toFixed(2) : 'Payment'}</button>\n        </div>\n    </form>\n    )\n};\n\nexport default Checkout;"]},"metadata":{},"sourceType":"module"}